#!/bin/bash
# create bucket
aws s3api create-bucket --bucket TEMPLATE_BUCKET_NAME_TO_UPLOAD --region TEMPLATE_REGION --create-bucket-configuration LocationConstraint=TEMPLATE_REGION
# update bucket policy
aws s3api put-bucket-policy --bucket TEMPLATE_BUCKET_NAME_TO_UPLOAD --policy file://../iam/upload-s3-policy.json
# set cors for upload bucket
aws s3api put-bucket-cors --bucket TEMPLATE_BUCKET_NAME_TO_UPLOAD --cors-configuration file://../cors/upload-s3-cors.json
# create bucket
aws s3api create-bucket --bucket TEMPLATE_BUCKET_NAME_FOR_VIDEOS --region TEMPLATE_REGION --create-bucket-configuration LocationConstraint=TEMPLATE_REGION
# update bucket policy
aws s3api put-bucket-policy --bucket TEMPLATE_BUCKET_NAME_FOR_VIDEOS --policy file://../iam/stream-s3-policy.json
# set cors for upload bucket
aws s3api put-bucket-cors --bucket TEMPLATE_BUCKET_NAME_FOR_VIDEOS --cors-configuration file://../cors/upload-s3-cors.json


# create transcoder preset
aws elastictranscoder create-preset --name TEMPLATE_TRANSCODER_PRESSET_NAME --container mp4 --video file://../transcoder/preset_video.json --audio file://../transcoder/preset_audio.json --thumbnails file://../transcoder/preset_thumbnails.json --description "Custom preset for video transcoding"
# create iam policy for uploading
aws iam create-policy --policy-name TEMPLATE_VIDEO_UPLOADING_POLICY_NAME --policy-document file://../iam/upload-policy.json
# create role for transcoder
aws iam create-role --role-name TEMPLATE_TRANSCODER_ROLE_NAME --assume-role-policy-document file://../iam/role-policy-document.json
# attach policies to role
aws iam attach-role-policy --role-name TEMPLATE_TRANSCODER_ROLE_NAME --policy-arn arn:aws:iam::TEMPLATE_CUSTOMER_ID:policy/TEMPLATE_VIDEO_UPLOADING_POLICY_NAME
# create pipeline for franscoder
aws elastictranscoder create-pipeline --name TEMPLATE_TRANSCODER_PIPELINE_NAME --input-bucket TEMPLATE_BUCKET_NAME_TO_UPLOAD --output-bucket TEMPLATE_BUCKET_NAME_FOR_VIDEOS --role arn:aws:iam::TEMPLATE_CUSTOMER_ID:role/TEMPLATE_TRANSCODER_ROLE_NAME

# create role for lambdas
aws iam create-role --role-name TEMPLATE_LAMBDA_ROLE_NAME --assume-role-policy-document file://../iam/lamda-video-role.json
# attach job submitter policy
aws iam attach-role-policy --role-name TEMPLATE_LAMBDA_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonElasticTranscoder_JobsSubmitter
# attach policy for uploading files
aws iam attach-role-policy --role-name TEMPLATE_LAMBDA_ROLE_NAME --policy-arn arn:aws:iam::TEMPLATE_CUSTOMER_ID:policy/TEMPLATE_VIDEO_UPLOADING_POLICY_NAME
# create policy for logging
aws iam create-policy --policy-name TEMPLATE_LAMBDA_LOGGING_POLICY_NAME --policy-document file://../iam/lambda-log-policy.json
# attach policy for logging
aws iam attach-role-policy --role-name TEMPLATE_LAMBDA_ROLE_NAME --policy-arn arn:aws:iam::TEMPLATE_CUSTOMER_ID:policy/TEMPLATE_LAMBDA_LOGGING_POLICY_NAME
echo "Please wait for roles to take effect"
sleep 10

# create function for generating signed urls
zip -j ../lambda/transcode-videos-get-url/index.zip ../lambda/transcode-videos-get-url/index.js
aws lambda create-function --function-name TEMPLATE_LAMBDA_GET_UPLOAD_URL_NAME --zip-file fileb://../lambda/transcode-videos-get-url/index.zip --handler index.handler --runtime nodejs6.10 --role arn:aws:iam::TEMPLATE_CUSTOMER_ID:role/TEMPLATE_LAMBDA_ROLE_NAME --environment Variables="{BUCKET=TEMPLATE_BUCKET_NAME_TO_UPLOAD,AUTH_DOMAIN=TEMPLATE_AUTH_DOMAIN}"

# create function for starting transcoding jobs
zip -j ../lambda/transcode-videos/index.zip ../lambda/transcode-videos/index.js
PIPELINE_ID=`aws elastictranscoder list-pipelines | jq -r '.Pipelines[]| select(.Name == "TEMPLATE_TRANSCODER_PIPELINE_NAME")|.Id'`
PRESET_ID=`aws elastictranscoder list-presets | jq -r '.Presets[]| select(.Name == "TEMPLATE_TRANSCODER_PRESSET_NAME")|.Id'`
aws lambda create-function --function-name TEMPLATE_LAMBDA_START_TRANSCODING_NAME --zip-file fileb://../lambda/transcode-videos/index.zip --handler index.handler --runtime nodejs6.10 --role arn:aws:iam::TEMPLATE_CUSTOMER_ID:role/TEMPLATE_LAMBDA_ROLE_NAME --environment Variables="{PIPELINE_ID=$PIPELINE_ID,PRESET_ID=$PRESET_ID}"
# attach policy to function so the s3 bucket can invoke it
aws lambda add-permission --function-name TEMPLATE_LAMBDA_START_TRANSCODING_NAME --statement-id TEMPLATE_LAMBDA_START_TRANSCODING_NAME-invoke --action lambda:InvokeFunction --principal s3.amazonaws.com --source-arn "arn:aws:s3:::TEMPLATE_BUCKET_NAME_TO_UPLOAD"
# add bucket create notification
aws s3api put-bucket-notification-configuration --bucket TEMPLATE_BUCKET_NAME_TO_UPLOAD --notification-configuration file://../lambda/upload-bucket-create-notification.json

#create function for notification on transcode finishing
zip -j ../lambda/transcode-videos-notification/index.zip ../lambda/transcode-videos-notification/index.js
aws lambda create-function --function-name TEMPLATE_LAMBDA_NOTIFICATION_NAME --zip-file fileb://../lambda/transcode-videos-notification/index.zip --handler index.handler --runtime nodejs6.10 --role arn:aws:iam::TEMPLATE_CUSTOMER_ID:role/TEMPLATE_LAMBDA_ROLE_NAME --environment Variables="{API_DOMAIN=TEMPLATE_API_DOMAIN}"
# attach policy to function so the s3 bucket can invoke it
aws lambda add-permission --function-name TEMPLATE_LAMBDA_NOTIFICATION_NAME --statement-id TEMPLATE_LAMBDA_NOTIFICATION_NAME-invoke --action lambda:InvokeFunction --principal s3.amazonaws.com --source-arn "arn:aws:s3:::TEMPLATE_BUCKET_NAME_FOR_VIDEOS"
# add bucket create notification
aws s3api put-bucket-notification-configuration --bucket TEMPLATE_BUCKET_NAME_FOR_VIDEOS --notification-configuration file://../lambda/upload-bucket-created-notification.json

#create api gateway
aws apigateway import-rest-api --body file://../api_gateway/video-upload-swagger-apigateway.json


